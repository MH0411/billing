/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eklinik_bill;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main.RMIConnector;

/**
 *
 * @author Ho Zhen Hong
 */
public class AddBillItem extends javax.swing.JFrame {
    
    //Call library
    private RMIConnector rc = new RMIConnector();
    private ServerDetail sd = new ServerDetail();
    private String host = sd.getHost();
    private int port = sd.getPort();
    
    private Date date = new Date();
    private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); 
    private String strDate = dateFormat.format(date);
    
    private String custId;
    private String billNo;

    /**
     * Creates new form AddBillItem
     */
    public AddBillItem() {
        initComponents();
        super.pack();
        super.setLocationRelativeTo(null);
        super.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        tableMiscellaneousItem();
        tableDrugsItem();
    }

    /**
     * @return the custId
     */
    public String getCustId() {
        return custId;
    }

    /**
     * @param custId the custId to set
     */
    public void setCustId(String custId) {
        this.custId = custId;
    }

    /**
     * @return the billNo
     */
    public String getBillNo() {
        return billNo;
    }

    /**
     * @param billNo the billNo to set
     */
    public void setBillNo(String billNo) {
        this.billNo = billNo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_MiscellaneousItem = new javax.swing.JTable();
        jtf_mm_SearchItem1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btn_AddMItem = new javax.swing.JButton();
        btn_Cancel1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jtf_mm_SearchItem2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_DrugsItem = new javax.swing.JTable();
        btn_AddDItem = new javax.swing.JButton();
        btn_Cancel2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jt_MiscellaneousItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Price", "Discount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_MiscellaneousItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jt_MiscellaneousItemMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jt_MiscellaneousItem);

        jtf_mm_SearchItem1.setToolTipText("Example : Patient Name, IC No. Other ID");

        jLabel9.setText("Enter Item Information:");

        btn_AddMItem.setText("Add Item");
        btn_AddMItem.setEnabled(false);
        btn_AddMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddMItemActionPerformed(evt);
            }
        });

        btn_Cancel1.setText("Cancel");
        btn_Cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Cancel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtf_mm_SearchItem1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_Cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_AddMItem, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_mm_SearchItem1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_AddMItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jtf_mm_SearchItem1.getAccessibleContext().setAccessibleDescription("Example : Item Code, Description");

        jTabbedPane.addTab("Miscellaneous Item", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setText("Enter Item Information:");

        jtf_mm_SearchItem2.setToolTipText("Example : Patient Name, IC No. Other ID");

        jt_DrugsItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Item Description", "Stock Quantity", "Unit Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_DrugsItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jt_DrugsItemMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jt_DrugsItem);

        btn_AddDItem.setText("Add Item");
        btn_AddDItem.setEnabled(false);
        btn_AddDItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddDItemActionPerformed(evt);
            }
        });

        btn_Cancel2.setText("Cancel");
        btn_Cancel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Cancel2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_Cancel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_AddDItem, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtf_mm_SearchItem2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_mm_SearchItem2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_AddDItem, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(btn_Cancel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Drugs Item", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
        );

        jTabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_AddDItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddDItemActionPerformed
        // TODO add your handling code here:
        Boolean check;
        int quantity = 0;
        try{
            quantity = Integer.parseInt(JOptionPane.showInputDialog("Quantity To Add: ", JOptionPane.QUESTION_MESSAGE));
        }catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Please enter number only.");
        } 
        
        if ((quantity != 0)){
            //Get no of row
            int rowIndex = -1;
            rowIndex = jt_DrugsItem.getSelectedRow();
            rowIndex = jt_DrugsItem.convertRowIndexToModel(rowIndex);

            String itemCode = jt_DrugsItem.getModel().getValueAt(rowIndex, 0).toString();
            String name = jt_DrugsItem.getModel().getValueAt(rowIndex, 1).toString();
            String stockQuantity = jt_DrugsItem.getModel().getValueAt(rowIndex, 3).toString();
            String unitPrice = jt_DrugsItem.getModel().getValueAt(rowIndex, 4).toString();
            
            int stockQty = Integer.parseInt(stockQuantity) - quantity;
            
            if (quantity < 0){
                JOptionPane.showMessageDialog(null, "Please enter positive number.");
                
            }else if (quantity < Integer.parseInt(stockQuantity) && (stockQty >= 0)){
                String month = new Month().getCreditMonth();

                try {
                    //Get current month credit and add the item price
                    String sql1 = "SELECT "+ month +" "
                            + "FROM customer_ledger "
                            + "WHERE customer_id = '"+ custId +"' ";
                    ArrayList<ArrayList<String>> data1 = rc.getQuerySQL(host, port, sql1);
                    String currentCredit = data1.get(0).get(0);

                    double totalPrice = quantity * Double.parseDouble(unitPrice);
                    currentCredit = String.valueOf(Double.parseDouble(currentCredit) + totalPrice);

                    //Update customer ledger
                    String sql2 = "UPDATE customer_ledger "
                            + "SET "+ month +" = '"+ currentCredit +"' "
                            + "WHERE customer_id = '"+ custId +"' ";
                    rc.setQuerySQL(host, port, sql2);

                    //Update customer dtl
                    String sql3 = "INSERT into customer_dtl (txn_date, item_cd, item_desc, item_amt, quantity, bill_no) "
                            + "VALUES('"+ strDate +"', '"+ itemCode +"','"+ name +"','"+ totalPrice +"','"+ quantity +"','"+ billNo +"')";
                    rc.setQuerySQL(host, port, sql3);

                    //Get current bill_amt and add item price;
                    String sql4 = "SELECT item_amt, quantity "
                            + "FROM customer_hdr "
                            + "WHERE customer_id = '"+ custId +"' "
                            + "AND bill_no = '"+ billNo +"'";
                    ArrayList<ArrayList<String>> data2 = rc.getQuerySQL(host, port, sql4);
                    String itemAmt = data2.get(0).get(0);
                    String qty = data2.get(0).get(1);

                    itemAmt = String.valueOf(Double.parseDouble(itemAmt) + totalPrice);
                    qty = String.valueOf(Integer.parseInt(qty) + quantity);

                    //Update customer hdr
                    String sql5 = "UPDATE customer_hdr "
                            + "SET txn_date = '"+ strDate +"', item_amt = '"+ itemAmt +"', quantity = '"+ qty +"' "
                            + "WHERE bill_no = '"+ billNo +"' "
                            + "AND customer_id = '"+ custId +"'";
                    rc.setQuerySQL(host, port, sql5);
                    
                    //Update mdc2 stock quantity;
                    String sql6 = "UPDATE pis_mdc2 "
                            + "SET d_stock_qty = '"+ stockQty +"' "
                            + "WHERE ud_mdc_code = '"+ itemCode +"'";
                    rc.setQuerySQL(host, port, sql6);

                    String infoMessage = "Success add data";
                    JOptionPane.showMessageDialog(null, infoMessage, "Success",
                            JOptionPane.INFORMATION_MESSAGE);

                    dispose();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient stock.");
            }
        }
    }//GEN-LAST:event_btn_AddDItemActionPerformed

    private void btn_Cancel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Cancel2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btn_Cancel2ActionPerformed

    private void btn_AddMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddMItemActionPerformed
        // TODO add your handling code here:
        
        //Get no of row
        int rowIndex = -1;
        rowIndex = jt_MiscellaneousItem.getSelectedRow();
        rowIndex = jt_MiscellaneousItem.convertRowIndexToModel(rowIndex);
        
        String itemCode = jt_MiscellaneousItem.getModel().getValueAt(rowIndex, 0).toString();
        String name = jt_MiscellaneousItem.getModel().getValueAt(rowIndex, 1).toString();
        String unitPrice = jt_MiscellaneousItem.getModel().getValueAt(rowIndex, 2).toString();
        String discount = jt_MiscellaneousItem.getModel().getValueAt(rowIndex, 3).toString();
               
        String month = new Month().getCreditMonth();
        
        try {
            //Get current month credit and add the item price
            String sql1 = "SELECT "+ month +" "
                    + "FROM far_customer_ledger "
                    + "WHERE customer_id = '"+ custId +"' ";
            ArrayList<ArrayList<String>> data1 = rc.getQuerySQL(host, port, sql1);
            String currentCredit = data1.get(0).get(0);
            
            if (currentCredit == null){
                currentCredit = "0";
            }
            
            currentCredit = String.valueOf(Double.parseDouble(currentCredit) + Double.parseDouble(unitPrice));

            //Update customer ledger
            String sql2 = "UPDATE far_customer_ledger "
                    + "SET "+ month +" = '"+ currentCredit +"' "
                    + "WHERE customer_id = '"+ custId +"' ";
            rc.setQuerySQL(host, port, sql2);

            //Update customer dtl
            String sql3 = "INSERT into far_customer_dtl (txn_date, item_cd, item_desc, item_amt, quantity, bill_no) "
                    + "VALUES('"+ strDate +"', '"+ itemCode +"','"+ name +"','"+ Double.parseDouble(unitPrice) +"','"+ 1 +"','"+ billNo +"')";
            rc.setQuerySQL(host, port, sql3);

            //Get current bill_amt and add item price;
            String sql4 = "SELECT item_amt, quantity "
                    + "FROM far_customer_hdr "
                    + "WHERE customer_id = '"+ custId +"' "
                    + "AND bill_no = '"+ billNo +"'";
            ArrayList<ArrayList<String>> data2 = rc.getQuerySQL(host, port, sql4);
            String itemAmt = data2.get(0).get(0);
            String quantity = data2.get(0).get(1);

            itemAmt = String.valueOf(Double.parseDouble(itemAmt) + Double.parseDouble(unitPrice));
            quantity = String.valueOf(Integer.parseInt(quantity) + 1);

            //Update customer hdr
            String sql5 = "UPDATE far_customer_hdr "
                    + "SET txn_date = '"+ strDate +"', item_amt = '"+ itemAmt +"', quantity = '"+ quantity +"' "
                    + "WHERE bill_no = '"+ billNo +"' "
                    + "AND customer_id = '"+ custId +"'";
            rc.setQuerySQL(host, port, sql5);

            String infoMessage = "Success add data";
            JOptionPane.showMessageDialog(null, infoMessage, "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            
            dispose();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btn_AddMItemActionPerformed

    private void btn_Cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Cancel1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btn_Cancel1ActionPerformed

    private void jt_DrugsItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_DrugsItemMousePressed
        // TODO add your handling code here:
        btn_AddDItem.setEnabled(true);
    }//GEN-LAST:event_jt_DrugsItemMousePressed

    private void jt_MiscellaneousItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_MiscellaneousItemMousePressed
        // TODO add your handling code here:
        btn_AddMItem.setEnabled(true);
    }//GEN-LAST:event_jt_MiscellaneousItemMousePressed

    /**
     * Display drugs items
     */
    public void tableDrugsItem(){
        try {
            String sql = "SELECT ud_mdc_code, d_trade_name, d_caution_code, d_stock_qty, d_sell_price "
                    + "FROM pis_mdc2 ";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);
            DefaultTableModel model = (DefaultTableModel) jt_DrugsItem.getModel();
            
            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_DrugsItem.setValueAt(data.get(i).get(0), i, 0);
                jt_DrugsItem.setValueAt(data.get(i).get(1), i, 1);
                jt_DrugsItem.setValueAt(data.get(i).get(2), i, 2);
                jt_DrugsItem.setValueAt(data.get(i).get(3), i, 3);
                jt_DrugsItem.setValueAt(data.get(i).get(4), i, 4);
            }
            
            tableDrugsItemSorter();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
     * Display miscellaneous items.
     */
    public void tableMiscellaneousItem() {
        try {
            String sql = "SELECT * FROM far_miscellaneous_item";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);
            DefaultTableModel model = (DefaultTableModel) jt_MiscellaneousItem.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_MiscellaneousItem.setValueAt(data.get(i).get(1), i, 0);
                jt_MiscellaneousItem.setValueAt(data.get(i).get(2), i, 1);
                jt_MiscellaneousItem.setValueAt(data.get(i).get(4), i, 2);
                jt_MiscellaneousItem.setValueAt(data.get(i).get(5), i, 3);
            }
            
            tableMiscellaneousItemSorter();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
     * Detect and sort table drugs item  content based on the input
     */
    public void tableDrugsItemSorter() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<TableModel>(jt_DrugsItem.getModel());
        jt_DrugsItem.setRowSorter(rowSorter);

        jtf_mm_SearchItem2.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem2.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);

                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem2.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }
    
    /**
     * Detect and sort table miscellaneous item  content based on the input
     */
    public void tableMiscellaneousItemSorter() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<TableModel>(jt_MiscellaneousItem.getModel());
        jt_MiscellaneousItem.setRowSorter(rowSorter);

        jtf_mm_SearchItem1.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem1.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);

                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem1.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBillItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBillItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBillItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBillItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddBillItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_AddDItem;
    private javax.swing.JButton btn_AddMItem;
    private javax.swing.JButton btn_Cancel1;
    private javax.swing.JButton btn_Cancel2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jt_DrugsItem;
    private javax.swing.JTable jt_MiscellaneousItem;
    private javax.swing.JTextField jtf_mm_SearchItem1;
    private javax.swing.JTextField jtf_mm_SearchItem2;
    // End of variables declaration//GEN-END:variables
}
