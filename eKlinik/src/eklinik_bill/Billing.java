/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eklinik_bill;

/**
 *
 * @author Amalina
 * @author Ho Zhen Hong
 */
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main.RMIConnector;

public class Billing extends javax.swing.JFrame {

    //Call library
    private RMIConnector rc = new RMIConnector();
    private ServerDetail sd = new ServerDetail();
    private String host = sd.getHost();
    private int port = sd.getPort();
    
    private DecimalFormat df = new DecimalFormat("0.00");
    private static String selectedPatient;
    private static String selectedDate;
    private static String selectedOrderNo;
    private String strDate;
    
    private static String custId;
    private static String billNo;
    private static String itemCode;

    /**
     * Creates new form billing
     */
    public Billing() {
        initComponents();
        super.pack();
        super.setLocationRelativeTo(null);
        super.setVisible(true);
        
        tablePatientInformation();
        tableManageMiscellaneous();
        tableListPatientBill();
    }

    public static String getSelectedPatient() {
        return selectedPatient;
    }
    
    public static String getSelectedDate(){
        return selectedDate;
    }
    
    public static String getSelectedOrderNo(){
        return selectedOrderNo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel_Billing = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jt_BillDescription = new javax.swing.JTable();
        btn_GenerateBill = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jt_PatientInformation = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtf_SearchPatient = new javax.swing.JTextField();
        jPanel_ManageMiscellaneous = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_MM = new javax.swing.JTable();
        jtf_mm_SearchItem = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jtf_mm_itemDesc = new javax.swing.JTextField();
        jtf_mm_itemCd = new javax.swing.JTextField();
        jtf_mm_buyPrice = new javax.swing.JTextField();
        jtf_mm_sellPrice = new javax.swing.JTextField();
        jtf_mm_disc = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_mm_cancel = new javax.swing.JButton();
        btn_mm_add = new javax.swing.JButton();
        btn_mm_update = new javax.swing.JButton();
        btn_mm_delete = new javax.swing.JButton();
        jPanel_ManageBill = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_ListPatientBill = new javax.swing.JTable();
        jtf_mb_SearchBill = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_ListItemPerPatient = new javax.swing.JTable();
        btn_AddItem = new javax.swing.JButton();
        btn_DeleteItem = new javax.swing.JButton();
        btn_Payment = new javax.swing.JButton();
        btn_PrintReceipt = new javax.swing.JButton();
        btn_Back = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jTabbedPane3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel_Billing.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Bill Description"));
        jPanel4.setPreferredSize(new java.awt.Dimension(11, 422));

        jt_BillDescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction Date", "Item ", "Description", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_BillDescription.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jt_BillDescription);

        btn_GenerateBill.setText("Generate Bill");
        btn_GenerateBill.setEnabled(false);
        btn_GenerateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_GenerateBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(516, 516, 516)
                        .addComponent(btn_GenerateBill, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_GenerateBill, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Information"));

        jt_PatientInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Episode Date", "Order No", "PMI No.", "IC No.", "Other ID", "Name", "Address", "Phone No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_PatientInformation.getTableHeader().setReorderingAllowed(false);
        jt_PatientInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_PatientInformationMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jt_PatientInformation);

        jLabel1.setText("Enter Patient Information:");

        jtf_SearchPatient.setToolTipText("Example : Patient Name, IC No. Other ID");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jtf_SearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_SearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel_BillingLayout = new javax.swing.GroupLayout(jPanel_Billing);
        jPanel_Billing.setLayout(jPanel_BillingLayout);
        jPanel_BillingLayout.setHorizontalGroup(
            jPanel_BillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_BillingLayout.createSequentialGroup()
                .addGroup(jPanel_BillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1185, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_BillingLayout.setVerticalGroup(
            jPanel_BillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_BillingLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Billing", jPanel_Billing);

        jPanel_ManageMiscellaneous.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Miscellaneous Items"));

        jt_MM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Description", "Buying Price", "Selling Price", "Discount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_MM.getTableHeader().setReorderingAllowed(false);
        jt_MM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_MMMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_MM);

        jtf_mm_SearchItem.setToolTipText("Example : Patient Name, IC No. Other ID");

        jLabel9.setText("Enter Item Information:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtf_mm_SearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_mm_SearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        jtf_mm_SearchItem.getAccessibleContext().setAccessibleDescription("Example : Item Code, Description, Price ");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Information"));

        jLabel6.setText("Discount");

        jLabel5.setText("Selling Price");

        jLabel4.setText("Buying Price");

        jLabel3.setText("Item Description");

        jLabel2.setText("Item Code");

        btn_mm_cancel.setText("Cancel");
        btn_mm_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_cancelActionPerformed(evt);
            }
        });

        btn_mm_add.setText("Add");
        btn_mm_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_addActionPerformed(evt);
            }
        });

        btn_mm_update.setText("Update");
        btn_mm_update.setEnabled(false);
        btn_mm_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_updateActionPerformed(evt);
            }
        });

        btn_mm_delete.setText("Delete");
        btn_mm_delete.setEnabled(false);
        btn_mm_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_mm_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mm_add, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mm_update, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mm_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jtf_mm_itemDesc)
                        .addComponent(jtf_mm_disc, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jtf_mm_itemCd)
                        .addComponent(jtf_mm_buyPrice)
                        .addComponent(jtf_mm_sellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(682, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_itemCd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_itemDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_buyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_sellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtf_mm_disc, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_mm_update, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mm_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mm_add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mm_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel_ManageMiscellaneousLayout = new javax.swing.GroupLayout(jPanel_ManageMiscellaneous);
        jPanel_ManageMiscellaneous.setLayout(jPanel_ManageMiscellaneousLayout);
        jPanel_ManageMiscellaneousLayout.setHorizontalGroup(
            jPanel_ManageMiscellaneousLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel_ManageMiscellaneousLayout.setVerticalGroup(
            jPanel_ManageMiscellaneousLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ManageMiscellaneousLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        jTabbedPane3.addTab("Manage Miscellaneous", jPanel_ManageMiscellaneous);

        jPanel_ManageBill.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("List Billing"));

        jt_ListPatientBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill No", "Customer ID", "Amount", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_ListPatientBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_ListPatientBillMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt_ListPatientBill);

        jtf_mb_SearchBill.setToolTipText("Example : Patient Name, IC No. Other ID");

        jLabel8.setText("Enter Bill Information:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jtf_mb_SearchBill, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_mb_SearchBill, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtf_mb_SearchBill.getAccessibleContext().setAccessibleDescription("Example : Bill no, Customer ID");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("List Item Per Patient"));

        jt_ListItemPerPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Description", "Item Quantity", "Unit Price", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_ListItemPerPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jt_ListItemPerPatientMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jt_ListItemPerPatient);

        btn_AddItem.setText("Add Item");
        btn_AddItem.setEnabled(false);
        btn_AddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddItemActionPerformed(evt);
            }
        });

        btn_DeleteItem.setText("Delete Item");
        btn_DeleteItem.setEnabled(false);
        btn_DeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteItemActionPerformed(evt);
            }
        });

        btn_Payment.setText("Payment");
        btn_Payment.setEnabled(false);

        btn_PrintReceipt.setText("Print Receipt");
        btn_PrintReceipt.setEnabled(false);
        btn_PrintReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PrintReceiptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(btn_AddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(89, 89, 89)
                .addComponent(btn_DeleteItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(97, 97, 97)
                .addComponent(btn_Payment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(92, 92, 92)
                .addComponent(btn_PrintReceipt)
                .addGap(293, 293, 293))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Payment)
                    .addComponent(btn_DeleteItem)
                    .addComponent(btn_AddItem)
                    .addComponent(btn_PrintReceipt))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel_ManageBillLayout = new javax.swing.GroupLayout(jPanel_ManageBill);
        jPanel_ManageBill.setLayout(jPanel_ManageBillLayout);
        jPanel_ManageBillLayout.setHorizontalGroup(
            jPanel_ManageBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel_ManageBillLayout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 1195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel_ManageBillLayout.setVerticalGroup(
            jPanel_ManageBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ManageBillLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Manage Bill", jPanel_ManageBill);

        btn_Back.setText("Back to Main Menu");
        btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 36)); // NOI18N
        jLabel7.setText("Billing System");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(276, 276, 276)
                .addComponent(btn_Back, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1200, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Back, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Back to Main Menu
     * @param evt
     */
    private void btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_BackActionPerformed

    /**
     * Add new miscellaneous item
     * @param evt
     */
    private void btn_mm_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_addActionPerformed
        // TODO add your handling code here:
        String itemCode = (String) jtf_mm_itemCd.getText();
        String itemDesc = (String) jtf_mm_itemDesc.getText();
        String buyPrice = (String) jtf_mm_buyPrice.getText();
        String sellPrice = (String) jtf_mm_sellPrice.getText();
        String disc = (String) jtf_mm_disc.getText();

        if (itemCode.equals("")) {
            String infoMessage = "Please insert data in Item Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (itemDesc.equals("")) {
            String infoMessage = "Please insert data in Item Description text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (buyPrice.equals("")) {
            String infoMessage = "Please insert data in Buying price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (sellPrice.equals("")) {
            String infoMessage = "Please insert data in Selling Price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (disc.equals("")) {
            String infoMessage = "Please insert data in Discount text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            try {

                String sql = "INSERT into miscellaneous_item (item_code, item_desc, buying_price, selling_price, discount)"
                        + "VALUES ('"+ itemCode +"','"+ itemDesc +"','"+ buyPrice +"','"+ sellPrice +"',"+ disc +" )";

                rc.setQuerySQL(host, port, sql);
                String infoMessage = "Success add data";
                JOptionPane.showMessageDialog(null, infoMessage, "Success", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh manage miscellaneous table
                tableManageMiscellaneous();
                
                jtf_mm_itemCd.setText("");
                jtf_mm_itemDesc.setText("");
                jtf_mm_buyPrice.setText("");
                jtf_mm_sellPrice.setText("");
                jtf_mm_disc.setText("");
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btn_mm_addActionPerformed

    /**
     * Cancel modify process
     * @param evt
     */
    private void btn_mm_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_cancelActionPerformed
        // TODO add your handling code here:
        btn_mm_add.setEnabled(true);
        btn_mm_update.setEnabled(false);
        btn_mm_delete.setEnabled(false);
        jtf_mm_itemCd.setEditable(true);
        jtf_mm_itemCd.setText("");
        jtf_mm_itemDesc.setText("");
        jtf_mm_buyPrice.setText("");
        jtf_mm_sellPrice.setText("");
        jtf_mm_disc.setText("");
    }//GEN-LAST:event_btn_mm_cancelActionPerformed

    /**
     * Update the item details
     * @param evt
     */
    private void btn_mm_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_updateActionPerformed
        // TODO add your handling code here:
        btn_mm_add.setEnabled(true);
        btn_mm_update.setEnabled(false);
        btn_mm_delete.setEnabled(false);
        jtf_mm_itemCd.setEditable(true);
        String mm_ItemCode = (String) jtf_mm_itemCd.getText();
        String mm_ItemDesc = (String) jtf_mm_itemDesc.getText();
        String mm_BuyPrice = (String) jtf_mm_buyPrice.getText();
        String mm_SellPrice = (String) jtf_mm_sellPrice.getText();
        String mm_Disc = (String) jtf_mm_disc.getText();

        if (mm_ItemCode.equals("")) {
            String infoMessage = "Please insert data in Item Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_ItemDesc.equals("")) {
            String infoMessage = "Please insert data in Item Description text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_BuyPrice.equals("")) {
            String infoMessage = "Please insert data in Buying price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_SellPrice.equals("")) {
            String infoMessage = "Please insert data in Selling Price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_Disc.equals("")) {
            String infoMessage = "Please insert data in Discount text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            try {
                String sql = "UPDATE miscellaneous_item "
                        + "SET item_desc = '"+ mm_ItemDesc +"', buying_price = '"+ mm_BuyPrice +"', selling_price = '"+ mm_SellPrice +"', discount = '"+ mm_Disc +"' "
                        + "WHERE item_code = '" + mm_ItemCode + "'";
                rc.setQuerySQL(host, port, sql);
                
                String infoMessage = "Success update data";
                JOptionPane.showMessageDialog(null, infoMessage, "Success", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh manage miscellaneous table
                tableManageMiscellaneous();
                
                jtf_mm_itemCd.setText("");
                jtf_mm_itemDesc.setText("");
                jtf_mm_buyPrice.setText("");
                jtf_mm_sellPrice.setText("");
                jtf_mm_disc.setText("");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btn_mm_updateActionPerformed

    /**
     * Send the select item details to text fields
     * @param evt
     */
    private void jt_MMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_MMMouseClicked
        // TODO add your handling code here:
        try {
            btn_mm_add.setEnabled(false);
            btn_mm_update.setEnabled(true);
            btn_mm_delete.setEnabled(true);
            jtf_mm_itemCd.setEditable(false);

            int row = jt_MM.getSelectedRow();
            row = jt_MM.convertRowIndexToModel(row);
            String mItemCode = (jt_MM.getModel().getValueAt(row, 0).toString());
            String sql = "SELECT * "
                    + "FROM miscellaneous_item "
                    + "WHERE item_code='" + mItemCode + "'";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);

            jtf_mm_itemCd.setText(data.get(0).get(1));
            jtf_mm_itemDesc.setText(data.get(0).get(2));
            jtf_mm_buyPrice.setText(data.get(0).get(3));
            jtf_mm_sellPrice.setText(data.get(0).get(4));
            jtf_mm_disc.setText(data.get(0).get(5));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_MMMouseClicked

    /**
     * Delete the selected item
     * @param evt
     */
    private void btn_mm_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_deleteActionPerformed
        // TODO add your handling code here:
        btn_mm_add.setEnabled(true);
        btn_mm_update.setEnabled(false);
        btn_mm_delete.setEnabled(false);
        jtf_mm_itemCd.setEditable(true);

        String mm_ItemCode = (String) jtf_mm_itemCd.getText();
        String mm_ItemDesc = (String) jtf_mm_itemDesc.getText();
        String mm_BuyPrice = (String) jtf_mm_buyPrice.getText();
        String mm_SellPrice = (String) jtf_mm_sellPrice.getText();
        String mm_Disc = (String) jtf_mm_disc.getText();

        if (mm_ItemCode.equals("")) {
            String infoMessage = "Please insert data in Item Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_ItemDesc.equals("")) {
            String infoMessage = "Please insert data in Item Description text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_BuyPrice.equals("")) {
            String infoMessage = "Please insert data in Buying price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_SellPrice.equals("")) {
            String infoMessage = "Please insert data in Selling Price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_Disc.equals("")) {
            String infoMessage = "Please insert data in Discount text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            int response = JOptionPane.showConfirmDialog(null, "Do you sure to delete selected item?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
//                System.out.println("No button clicked");
            } else if (response == JOptionPane.YES_OPTION) {
//                System.out.println("Yes button clicked");
                try {
                    String sql = "DELETE FROM miscellaneous_item "
                            + "WHERE item_code='" + mm_ItemCode + "'";
                    rc.setQuerySQL(host, port, sql);

                    String infoMessage = "Success delete data";
                    JOptionPane.showMessageDialog(null, infoMessage, "Success", JOptionPane.INFORMATION_MESSAGE);

                    //Refresh miscellaneous item table
                    tableManageMiscellaneous();

                    jtf_mm_itemCd.setText("");
                    jtf_mm_itemDesc.setText("");
                    jtf_mm_buyPrice.setText("");
                    jtf_mm_sellPrice.setText("");
                    jtf_mm_disc.setText("");

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else if (response == JOptionPane.CLOSED_OPTION) {
//                System.out.println("JOptionPane closed");
            }
        }
    }//GEN-LAST:event_btn_mm_deleteActionPerformed

    /**
     * Display add bill item window
     * @param evt 
     */
    private void btn_AddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddItemActionPerformed
        // TODO add your handling code here:
        AddBillItem addBillItem = new AddBillItem();
        addBillItem.setCustId(custId);
        addBillItem.setBillNo(billNo);
        addBillItem.setVisible(true);
    }//GEN-LAST:event_btn_AddItemActionPerformed

    /**
     * Delete selected bill item
     * @param evt 
     */
    private void btn_DeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteItemActionPerformed
        // TODO add your handling code here:
        int rowIndex1 = -1;
        int rowIndex2 = -1;
        
        int response = JOptionPane.showConfirmDialog(null, "Do you sure to delete selected item?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.NO_OPTION) {
//            System.out.println("No button clicked");
        } else if (response == JOptionPane.YES_OPTION) {
//            System.out.println("Yes button clicked");
            try {
                rowIndex1 = jt_ListPatientBill.getSelectedRow();
                rowIndex1 = jt_ListPatientBill.convertRowIndexToModel(rowIndex1);
                rowIndex2 = jt_ListItemPerPatient.getSelectedRow();
                rowIndex2 = jt_ListItemPerPatient.convertRowIndexToModel(rowIndex2);

                billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex1, 0).toString();
                itemCode = jt_ListItemPerPatient.getModel().getValueAt(rowIndex2, 0).toString();
                String itemAmt = jt_ListItemPerPatient.getModel().getValueAt(rowIndex2, 4).toString();
                String qty = jt_ListItemPerPatient.getModel().getValueAt(rowIndex2, 2).toString();

                if ((rowIndex1 != -1 ) && (rowIndex2 != -1)){
                    //Delete from customer dtl
                    String sql1 = "DELETE FROM  customer_dtl "
                            + "WHERE bill_no = '"+ billNo +"'"
                            + "AND item_cd = '"+ itemCode +"' ";
                    rc.setQuerySQL(host, port, sql1);
                    
                    String month = new Month().getCreditMonth();
                    //Get current credit of customer
                    String sql2 = "SELECT "+ month +" "
                            + "FROM customer_ledger "
                            + "WHERE customer_id = '"+ custId +"' ";
                    ArrayList<ArrayList<String>> data1 = rc.getQuerySQL(host, port, sql2);
                    String currentCredit = data1.get(0).get(0);
                    
                    currentCredit = String.valueOf(Double.parseDouble(currentCredit) - Double.parseDouble(itemAmt));
                    
                    //Update customer ledger
                    String sql3 = "UPDATE customer_ledger "
                            + "SET "+ month +" = '"+ currentCredit +"' "
                            + "WHERE customer_id = '"+ custId +"' ";
                    rc.setQuerySQL(host, port, sql3);
                    
                    //Get current bill_amt and minus item price;
                    String sql4 = "SELECT item_amt, quantity "
                            + "FROM customer_hdr "
                            + "WHERE customer_id = '"+ custId +"' "
                            + "AND bill_no = '"+ billNo +"'";
                    ArrayList<ArrayList<String>> data2 = rc.getQuerySQL(host, port, sql4);
                    String itemAmt1 = data2.get(0).get(0);
                    String quantity = data2.get(0).get(1);
                    
                    itemAmt1 = String.valueOf(Double.parseDouble(itemAmt1) - Double.parseDouble(itemAmt));
                    quantity = String.valueOf(Integer.parseInt(quantity) - Integer.parseInt(qty));

                    //Update customer hdr
                    String sql5 = "UPDATE customer_hdr "
                            + "SET txn_date = '"+ strDate +"', item_amt = '"+ itemAmt1 +"', quantity = '"+ quantity +"' "
                            + "WHERE bill_no = '"+ billNo +"' "
                            + "AND customer_id = '"+ custId +"'";
                    rc.setQuerySQL(host, port, sql5);
                    
                    String infoMessage = "Success delete data";
                    JOptionPane.showMessageDialog(null, infoMessage, "Success", JOptionPane.INFORMATION_MESSAGE);

                    //remove all row
                    DefaultTableModel model = (DefaultTableModel) jt_ListItemPerPatient.getModel();
                    int rowCount = model.getRowCount();
                    for (int i = rowCount - 1; i >= 0; i--) {
                        model.removeRow(i);
                    }

                    String sql6 = "SELECT item_cd, item_desc, quantity, item_amt, quantity* item_amt "
                         + "FROM customer_dtl "
                         + "WHERE bill_no = '"+ billNo +"'";
                    ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql6);

                    //add row and show value
                    for (int i = 0; i < data.size(); i++) {
                        model.addRow(new Object[]{"", "", "", "", ""});

                        jt_ListItemPerPatient.setValueAt(data.get(i).get(0), i, 0);
                        jt_ListItemPerPatient.setValueAt(data.get(i).get(1), i, 1);
                        jt_ListItemPerPatient.setValueAt(data.get(i).get(2), i, 2);
                        jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(3))), i, 3);
                        jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 4);
                    }
                    tableListPatientBill();
                    
                } else {
                    String infoMessage = "No item selected";
                    JOptionPane.showMessageDialog(null, infoMessage, "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (response == JOptionPane.CLOSED_OPTION) {
//            System.out.println("JOptionPane closed");
        }   
        
    }//GEN-LAST:event_btn_DeleteItemActionPerformed

    /**
     * Search patient information to bill description
     * @param evt
     */
    private void jt_PatientInformationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_PatientInformationMouseClicked
        // TODO add your handling code here:
        try {
            int rowIndex = -1;

            //Get no of row
            rowIndex = jt_PatientInformation.getSelectedRow();
            rowIndex = jt_PatientInformation.convertRowIndexToModel(rowIndex);
            //Assign row value to select
            selectedPatient = jt_PatientInformation.getModel().getValueAt(rowIndex, 2).toString();
            selectedDate = jt_PatientInformation.getModel().getValueAt(rowIndex, 0).toString();
            selectedOrderNo = jt_PatientInformation.getModel().getValueAt(rowIndex, 1).toString();

            DateFormat dateFormat;
            dateFormat = new SimpleDateFormat("dd/MM/yyyy"); //2015-01-06
            Date date = new Date();
            String todayDate = dateFormat.format(date);

            String sql = "Select "
            + "pdm.dispensed_date, "
            + "pdd.DRUG_ITEM_CODE, "
            + "mdc.D_TRADE_NAME, "
            + "pdd.DISPENSED_QTY, "
            + "mdc.D_PRICE_PPACK, "
            + "(pdd.DISPENSED_QTY * mdc.D_PRICE_PPACK) AS TOTAL "
            + "FROM "
            + "pms_episode pe, "
            + "pis_order_master pom, "
            + "pis_dispense_detail pdd, "
            + "pis_mdc2 mdc, "
            + "pms_patient_biodata pb, "
            + "pis_dispense_master pdm "
            + "WHERE pe.PMI_NO = pom.PMI_NO "
            + "AND pom.ORDER_NO = pdd.ORDER_NO "
            + "AND pom.ORDER_NO = '"+ selectedOrderNo +"' "
            + "AND pdd.DRUG_ITEM_CODE = mdc.UD_MDC_CODE "
            + "AND pe.PMI_NO = pb.PMI_NO "
            + "AND DATE(date_format(str_to_date(pe.episode_date, '%d/%m/%Y'), '%Y-%m-%d')) = DATE(pdm.order_date) "
            + "AND pe.episode_date = '"+ selectedDate +"' "
            + "GROUP BY pom.ORDER_NO, mdc.UD_MDC_CODE ";

            System.out.println(todayDate);

            //Execute query
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);
            DefaultTableModel model = (DefaultTableModel) jt_BillDescription.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_BillDescription.setValueAt(data.get(i).get(0), i, 0);
                jt_BillDescription.setValueAt(data.get(i).get(1), i, 1);
                jt_BillDescription.setValueAt(data.get(i).get(2), i, 2);
                jt_BillDescription.setValueAt((int) Double.parseDouble((data.get(i).get(3))), i, 3);
                jt_BillDescription.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 4);
                jt_BillDescription.setValueAt(df.format(Double.parseDouble(data.get(i).get(5))), i, 5);
            }

            if (data.size() > 0) {
                btn_GenerateBill.setEnabled(true);
            }
            if (data.size() < 1) {
                btn_GenerateBill.setEnabled(false);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_PatientInformationMouseClicked

    /**
     * Generate bill details
     * @param evt
     */
    private void btn_GenerateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_GenerateBillActionPerformed
        // TODO add your handling code here:
        Generate generate = new Generate(); //set new window
        generate.setVisible(true);//set new window visible
        dispose(); // for hide current window
    }//GEN-LAST:event_btn_GenerateBillActionPerformed

    /**
     * Enable delete bill item button
     * @param evt 
     */
    private void jt_ListItemPerPatientMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_ListItemPerPatientMousePressed
        // TODO add your handling code here:
        btn_DeleteItem.setEnabled(true);
    }//GEN-LAST:event_jt_ListItemPerPatientMousePressed

    /**
     * Display bill items in table list item per patient
     * @param evt 
     */
    private void jt_ListPatientBillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_ListPatientBillMouseClicked
        // TODO add your handling code here:
        btn_AddItem.setEnabled(true);
        btn_Payment.setEnabled(true);
        btn_PrintReceipt.setEnabled(true);
        
        try {
            int rowIndex = -1;

            //Get no of row
            rowIndex = jt_ListPatientBill.getSelectedRow();
            rowIndex = jt_ListPatientBill.convertRowIndexToModel(rowIndex);
            
            billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex, 0).toString();
            custId = jt_ListPatientBill.getModel().getValueAt(rowIndex, 1).toString();
            
            String sql = "SELECT item_cd, item_desc, quantity, item_amt/quantity, item_amt "
                    + "FROM customer_dtl "
                    + "WHERE bill_no = '"+ billNo +"'";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);
            DefaultTableModel model = (DefaultTableModel) jt_ListItemPerPatient.getModel();
            
            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            
            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_ListItemPerPatient.setValueAt(data.get(i).get(0), i, 0);
                jt_ListItemPerPatient.setValueAt(data.get(i).get(1), i, 1);
                jt_ListItemPerPatient.setValueAt(data.get(i).get(2), i, 2);
                jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(3))), i, 3);
                jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 4);
            }
            
        } catch (Exception e) {
             JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_ListPatientBillMouseClicked

    /**
     * Print selected bill
     * @param evt 
     */
    private void btn_PrintReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PrintReceiptActionPerformed
        // TODO add your handling code here: 
        try {
            //Get no of row
            int rowIndex = -1;
            rowIndex = jt_ListPatientBill.getSelectedRow();
            rowIndex = jt_ListPatientBill.convertRowIndexToModel(rowIndex);

            billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex, 0).toString();
            custId = jt_ListPatientBill.getModel().getValueAt(rowIndex, 1).toString();

            PDF pdf = new PDF(custId, billNo);
            pdf.print();
            Desktop.getDesktop().open(new File("Receipt.pdf"));
        } catch (Exception ex) {
            Logger.getLogger(Billing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_PrintReceiptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Billing().setVisible(true);

            }
        });
    }

    /**
     * Display list of patient
     */
    private void tablePatientInformation() {

        SimpleDateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        strDate = df1.format(date);
        String strDate1 = df2.format(date);
        
        try {
            String sql = "SELECT distinct "
                    + "pe.episode_date, pom.order_no, pe.PMI_NO, pb.NEW_IC_NO, pb.ID_NO, "
                    + "pb.PATIENT_NAME, pb.HOME_ADDRESS, "
                    + "pb.MOBILE_PHONE "
                    + "FROM pms_episode pe "
                    + "INNER JOIN pis_order_master pom "
                    + "ON pe.PMI_NO = pom.PMI_NO "
                    + "INNER JOIN ehr_central ec "
                    + "ON pe.PMI_NO = ec.PMI_NO "
                    + "INNER JOIN pms_patient_biodata pb "
                    + "ON ec.PMI_NO = pb.PMI_NO "
                    + "WHERE (ec.status = 1 OR ec.status = 3) "
                    + "AND pe.STATUS ='Discharge' "
                    + "AND pom.episode_code like '"+ strDate1 +" %' " 
                    + "AND pe.episode_date = '"+ strDate +"' "
                    + "AND NOT EXISTS ("
                    + "SELECT ch.order_no FROM customer_hdr ch "
                    + "WHERE ch.order_no =  pom.order_no) "
                    + "Group by pom.order_no";
            
            System.out.println(strDate);
            System.out.println(strDate1);

            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);
            DefaultTableModel model = (DefaultTableModel) jt_PatientInformation.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //Add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_PatientInformation.setValueAt(data.get(i).get(0), i, 0);
                jt_PatientInformation.setValueAt(data.get(i).get(1), i, 1);
                jt_PatientInformation.setValueAt(data.get(i).get(2), i, 2);
                jt_PatientInformation.setValueAt(data.get(i).get(3), i, 3);
                jt_PatientInformation.setValueAt(data.get(i).get(4), i, 4);
                jt_PatientInformation.setValueAt(data.get(i).get(5), i, 5);
                jt_PatientInformation.setValueAt(data.get(i).get(6), i, 6);
                jt_PatientInformation.setValueAt(data.get(i).get(7), i, 7);
            }

            tablePatientInformationSorter();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * Display manage miscellaneous items.
     */
    private void tableManageMiscellaneous() {
        try {
            String sql = "SELECT * FROM miscellaneous_item";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);// execute query
            DefaultTableModel model = (DefaultTableModel) jt_MM.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_MM.setValueAt(data.get(i).get(1), i, 0);
                jt_MM.setValueAt(data.get(i).get(2), i, 1);
                jt_MM.setValueAt(data.get(i).get(3), i, 2);
                jt_MM.setValueAt(data.get(i).get(4), i, 3);
                jt_MM.setValueAt(data.get(i).get(5), i, 4);
            }
            
            tableMiscellaneousItemSorter();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * Display list of patient's bill
     */
    public void tableListPatientBill(){
        try{
            String sql = "SELECT bill_no, customer_id, item_amt, quantity "
                    + "FROM customer_hdr ";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, port, sql);
            DefaultTableModel model = (DefaultTableModel) jt_ListPatientBill.getModel();
            
            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            
            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_ListPatientBill.setValueAt(data.get(i).get(0), i, 0);
                jt_ListPatientBill.setValueAt(data.get(i).get(1), i, 1);
                jt_ListPatientBill.setValueAt(data.get(i).get(2), i, 2);
                jt_ListPatientBill.setValueAt(data.get(i).get(3), i, 3);
            }
            
            tablePatientBillSorter();
                    
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
     * Detect and sort table patient information content based on the input
     */
    public void tablePatientInformationSorter() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<TableModel>(jt_PatientInformation.getModel());
        jt_PatientInformation.setRowSorter(rowSorter);

        jtf_SearchPatient.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jtf_SearchPatient.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);

                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jtf_SearchPatient.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }
    
     /**
     * Detect and sort table miscellaneous item  content based on the input
     */
    public void tableMiscellaneousItemSorter() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<TableModel>(jt_MM.getModel());
        jt_MM.setRowSorter(rowSorter);

        jtf_mm_SearchItem.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);

                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }
    
    /**
     * Detect and sort table list patient bill content based on the input
     */
    public void tablePatientBillSorter(){
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<TableModel>(jt_ListPatientBill.getModel());
        jt_ListPatientBill.setRowSorter(rowSorter);

        jtf_mb_SearchBill.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jtf_mb_SearchBill.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);

                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jtf_mb_SearchBill.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_AddItem;
    private javax.swing.JButton btn_Back;
    private javax.swing.JButton btn_DeleteItem;
    private javax.swing.JButton btn_GenerateBill;
    private javax.swing.JButton btn_Payment;
    private javax.swing.JButton btn_PrintReceipt;
    private javax.swing.JButton btn_mm_add;
    private javax.swing.JButton btn_mm_cancel;
    private javax.swing.JButton btn_mm_delete;
    private javax.swing.JButton btn_mm_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel_Billing;
    private javax.swing.JPanel jPanel_ManageBill;
    private javax.swing.JPanel jPanel_ManageMiscellaneous;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jt_BillDescription;
    private javax.swing.JTable jt_ListItemPerPatient;
    private javax.swing.JTable jt_ListPatientBill;
    private javax.swing.JTable jt_MM;
    private javax.swing.JTable jt_PatientInformation;
    private javax.swing.JTextField jtf_SearchPatient;
    private javax.swing.JTextField jtf_mb_SearchBill;
    private javax.swing.JTextField jtf_mm_SearchItem;
    private javax.swing.JTextField jtf_mm_buyPrice;
    private javax.swing.JTextField jtf_mm_disc;
    private javax.swing.JTextField jtf_mm_itemCd;
    private javax.swing.JTextField jtf_mm_itemDesc;
    private javax.swing.JTextField jtf_mm_sellPrice;
    // End of variables declaration//GEN-END:variables

}
